.data
	#Program Name: a2_pb2.asm
	#Programmer Name: Muhammad Sameed Gilani
	#Programmer Roll Number: 231488347
	
prompt: .asciiz "Enter a number: "
plus: .asciiz " + "
eq: .asciiz " = "

.text
main:
	jal getNum
	jal firstSum

	
	#Print final sum
	lw	$a0,24($sp)	# Accessing first input from stack
	li	$v0,1
	syscall
	jal	print_plus
	
	lw	$a0,16($sp)	# Accessing second input from stack
	li	$v0,1
	syscall
	jal	print_plus
	
	lw	$a0,4($sp)	# Accessing third input from stack
	li	$v0,1
	syscall
	jal	print_eq
	
	lw	$a0,0($sp)	# Accessing Final Sum from stack
	li	$v0,1
	syscall
	
	jal Exit
	

getNum:
	#Prints prompt asking user to enter a number
	li	$v0,4
	la	$a0,prompt
	syscall
	#Reads user input and stores in $v0
	li	$v0,5
	syscall
	
	addi	$sp,$sp,-4	# Moves the stack pointer, $sp 4 positions, to make space for an integer to be stored
	sw	$v0, 0($sp)	# the users input is stored at that position
	
	
	jr	$ra		#Go back to caller
		
firstSum:
	addi	$sp,$sp,-4	
	sw	$ra, 0($sp)	# the address to return to main is stored in the 1st position of the stack
	
	jal	getNum
	
	lw	$t0,0($sp) #	loading the second input. which is at the 0th position of the stack
	lw	$t1,8($sp) #	loading the first input. which is at the 2nd position of the stack
	
	
	add	$t2,$t0,$t1	# adding the 2 inputs together
	
	
	addi	$sp,$sp,-4
	sw	$t2, 0($sp)	# storing the sum into the stack at the 3rd position
	
	jal	SecondSum
	
	lw	$ra,20($sp)	# loading the address to return to main from the stack. which is at the 1st position
	jr	$ra	# going back to main
	
SecondSum:
	addi	$sp,$sp,-4
	sw	$ra, 0($sp)	# the address to return to firstSum is stored in the 4th position of the stack
	
	jal	getNum
	
	lw	$t0,0($sp) #	loading the third input. which is at the 5th position of the stack
	lw	$t1,8($sp) #	loading the sum of input 1 & 2. which is at the 3rd position of the stack
	
		
	add	$t2,$t0,$t1	# adding the inout 3 and the previous sum together
	
	
	addi	$sp,$sp,-4
	sw	$t2, 0($sp)	# storing the sum into the stack at the 6th position
	
	lw	$ra,8($sp)	# loading the address to return to firstSum from the stack. which is at the 4th position
	jr	$ra	#	going back to firstSum
	
print_plus:
	# Print a plus sign
	li	$v0,4
	la	$a0,plus
	syscall
	
	jr	$ra
	
print_eq:
	# print an equal sign
	li	$v0,4
	la	$a0,eq
	syscall
	
	jr	$ra
	
Exit:
	#End program gracefully
	li	$v0,10
	syscall
